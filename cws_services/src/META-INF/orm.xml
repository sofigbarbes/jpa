<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
	xmlns="http://java.sun.com/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
	version="2.0">

	<!-- Vehicle queries -->
	<named-query name="Vehicle.findByPlate">
		<query>select v from Vehicle v where v.plateNumber = ?1</query>
	</named-query>

	<!-- WorkOrder queries -->
	<named-query name="WorkOrder.findByIds">
		<query>select a from WorkOrder a where a.id in ?1</query>
	</named-query>

	<named-query name="WorkOrder.findByPlate">
		<query> select w from WorkOrder w join w.vehicle v where v.plateNumber = ?1</query>
	</named-query>

	<named-query name="WorkOrder.findNotInvoicedByClientDni">
		<query> <![CDATA[
	  select w from WorkOrder w join w.vehicle v where v.client.dni = ?1 and
	  w.status <> ?2 ]]> </query>
	</named-query>

	<named-query name="WorkOrder.findByVehicleAndDescription">
		<query> <![CDATA[
	  select w from WorkOrder w join w.vehicle v where v.id = ?1 and
	  w.description = ?2 ]]> </query>
	</named-query>

	<named-query name="WorkOrder.findUnfinished">
		<query>
	  select w from WorkOrder w where w.status = ?1 or w.status = ?2
	  </query>
	</named-query>


	<!-- PaymentMean queries -->
	<named-query name="PaymentMean.findByInvoiceId">
		<query>
			select m 
			from Invoice f 
				join f.workOrders w 
				join w.vehicle.client c 
				join c.paymentMeans m 
			where f.id = ?1
		</query>
	</named-query>

	<!-- Mechanic queries -->
	<named-query name="Mechanic.findByDni">
		<query>
			select m 
			from Mechanic m 
			where m.dni = ?1
		</query>
	</named-query>

	<named-query name="Mechanic.findEnrolledAndPassed">
		<query>
			select m 
			from Mechanic m join Enrollment e
			where m.id = e.mechanic.id and e.passed=true
		</query>
	</named-query>

	<named-query name="Mechanic.findEnrolled">
		<query>
			select distinct m 
			from Mechanic m join Enrollment e
			where m.id = e.mechanic.id
		</query>
	</named-query>

	<!-- Course queries -->
	<named-query name="Course.findByCode">
		<query>
			select c 
			from Course c
			where c.code = ?1
		</query>
	</named-query>

	<!-- Client queries -->
	<named-query name="Client.findByDni">
		<query>
			select c
			from Client c 
			where c.dni = ?1
		</query>
	</named-query>

	<!-- Invoice queries -->
	<named-query name="Invoice.findByNumber">
		<query>select f from Invoice f where f.number = ?1</query>
	</named-query>

	<named-query name="Invoice.getNextInvoiceNumber">
		<query>select max(f.number) + 1 from Invoice f</query>
	</named-query>

	<!-- Intervention queries -->
	<named-query name="Intervention.findByWorkOrderId">
		<query>select f from Intervention f where f.workOrder.id = ?1</query>
	</named-query>

	<!-- Certificate queries -->
	<named-query name="Certificate.findByVehicleTypeId">
		<query>select f from Certificate f where f.vehicleType.id = ?1</query>
	</named-query>

	<named-query name="Certificate.findByWorkOrderId">
		<query>select f from Certificate f join WorkOrder w where w.id = ?1 and
		w.vehicle.vehicleType.id = f.vehicleType.id</query>
	</named-query>

	<!-- Enrollment queries -->
	<named-query name="Enrollment.findByCourseId">
		<query>
			select m 
			from Enrollment m 
			where m.course.id = ?1
		</query>
	</named-query>

	<named-query name="Enrollment.findHoursEnrolled">
		<query>
				select SUM (((( c.duration * d.hours ) / 100 ) * e.attendance ) / 100 )
				from VehicleType v
					join v.dedications d
					join d.course c
					join c.enrollments e
				where e.passed = true
					and e.mechanic.id = ?1
					and d.vehicleType.id = ?2
					group by v.minTrainingHours
		</query>
	</named-query>


	<!-- VehicleType queries -->
	<named-query name="VehicleType.findDedicated">
		<query>
			select v 
			from VehicleType v join Dedication d
			where v.id = d.vehicleType.id
		</query>
	</named-query>


	<!-- Certificate queries -->
	<named-query name="Certificate.getCertificates">
		<query>
			<![CDATA[ 
				select distinct e.mechanic.id, d.vehicleType.id 
				from Enrollment e 
					join Course c 
					join Dedication d 
					join VehicleType v
				where d.vehicleType.id=v.id 
					and d.course.id = c.id 
					and c.id = e.course.id
					and (e.attendance * c.duration * d.hours) / 10000 >= v.minTrainingHours
					and e.passed = true 
					and (e.mechanic.id, d.vehicleType.id) not in
						(select c.mechanic.id, c.vehicleType.id from Certificate c)
			]]> 
		</query>
	</named-query>

	<named-query
		name="Certificate.findByMechanicAndVehicleType">
		<query>
			select c
			from Certificate c 
			where c.mechanic.id = ?1 and c.vehicleType.id = ?2
		</query>
	</named-query>



	<!-- Use this format if your query has numeric comparisons as the one in 
		this example <named-query name="findItemsOnSaleByCategoryId"> <query> <![CDATA[ 
		select i from Item i join i.categories c where c.id = ?2 and i.startDate 
		<= ?1 and i.endDate >= ?1 ]]> </query> </named-query> -->

</entity-mappings>